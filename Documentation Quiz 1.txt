QUIZ 1 DOCUMENTATION
ANDREW TA
ANDREW NOMURA

*NOTE*
In order for various user action functions to work, we have to open a new account first, using option 5.

Fix #1
===============================================================================================================================
On lines 45-48 The original code had 

Original Code
this.depsoit = function(amount) { this.acctBalance = this.acctBalance + amount; }

While this LOGICALLy is correct, it doesn't work because js would concatenate the the two numbers as if they were strings. So we add "parseInt()" to each integer to get the correct calculation


Corrected Code
this.deposit = function(amount) 		//ADDED IF FOR ANY NON VALID ENTRY *******************
	{ 
		this.acctBalance  = parseInt(this.acctBalance) +  parseInt(amount); // use parseInt() so that the ints don't get concatentated. ************
	}
===============================================================================================================================










Fix #2
===============================================================================================================================
For lines 52-55 refer to Fix #1

===============================================================================================================================










Fix #3
===============================================================================================================================
For Lines 93-103 there was no function to "removeAccount" so we added it in


//this function loops through each instance in the array of accounts and compares the index to the number that the user inputs


	this.removeAccount = function(rAcct) 
	{ 
		for (let i = this.accounts.length - 1; i >= 0; i--)
		{
			if (this.accounts[i] == this.accounts[rAcct-1])
			{
				this.accounts.splice(i, 1);
				break;
			}
		}
	}


===============================================================================================================================










Fix #4
===============================================================================================================================
Throughout most the variable declarations we changed var to let. HOWEVER, given how the code was formatted, such as do-while loops 
We kept some var variables so that the while statement may still use the respective variables to do its check statement
===============================================================================================================================







Fix #5
===============================================================================================================================
For lines 165-206, we revised the createCustomerUI function to have better functionality. For example, it tests if the customer's input already exists; therefore, prompting the user to pick another username to create an account with.

Original Code
// ----------------------------------------------
	// Allows the user to enroll in the bank (the UI)
	// ----------------------------------------------
	this.createCustomerUI = function()
	{
		// Create user name
		var userName = readline.question("Please pick a user name: ");
		
		// Pick the password 
		var userPassword = readline.question("Please pick a user password: ");	
		
		// Create and add user
		this.createAndAddCustomer(userName, userPassword);
		
		console.log("Created account for ", userName);
	}
	
Corrected Code
/ ----------------------------------------------
	// Allows the user to enroll in the bank (the UI)
	// ----------------------------------------------
	this.createCustomerUI = function()
	{
		do
		{
			// Create user name
			var userName = readline.question("Please pick a user name: ");
		
			// Pick the password 
			var userPassword = readline.question("Please pick a user password: ");	
			
			//Variable to test if there is an existing user with the same user name
			var match = false;
			
			// Is this a registered user?
			if(userName in this.customers)
			{
				match = true;
			}
			
			//Error statement for having the same user name as an exisiting user.
			while (match == true)
			{
				console.log("There is an existing user name. Please pick a different user name and user password.");
				this.createCustomerUI(userName, userPassword);
				if (userName in this.customers == false)
				{
					match = false;
				}
			}
		} while (match == true);
				
				
		// Create and add user
		this.createAndAddCustomer(userName, userPassword);
		
		//shows the menu again if they want to do something else
		this.masterChoice(userName, userPassword);
		
	}
===============================================================================================================================







Fix #6
===============================================================================================================================
For lines 212-281, we added an else statement toto the userActionMenuUI function to check if the user were to input an invalid option for the main menu of the customer. If that case were to appear then we would return an error statement and employ the user to re-enter another option.

Original Code
	this.userActionMenuUI = function(customer)
	{
		do
		{
			// Get the user input and create a customer object
			console.log("-----------------------------------------------");
			console.log("1. Deposit");
			console.log("2. Withdraw");
			console.log("3. Transfer");
			console.log("4. View Accounts");
			console.log("5. Open New Account");
			console.log("6. Remove Account");
			console.log("7. Logout");
			console.log("-----------------------------------------------\n\n");

			// Accept input
			var choice = readline.question("Choice: ");
			
			// Decide what to do
			
			// Deposit	
			if(choice == 1)
			{
				console.log("Deposit");
				this.depositUI(customer);
			}
			// Withdraw
			else if(choice == 2)
			{
				console.log("Withdraw");
				this.withdrawUI(customer);
			}
			// Transfer
			else if(choice == 3)
			{
				console.log("Transfer");
				this.transferUI(customer);
			}
			// View accounts
			else if(choice == 4)
			{
				console.log("View Accounts");
				this.viewAccounts(customer);
				
			}
			// Open new account
			else if(choice == 5)
			{
				console.log("Open New Account");
				this.openAccountUI(customer);
			}
			// Close customer account
			else if(choice == 6)
			{
				console.log("Remove Account");
				this.closeAccount(customer)
			}
		}
		while(choice != 7);
	}
	
Corrected Code
		do
		{
			// Get the user input and create a customer object
			console.log("-----------------------------------------------");
			console.log("1. Deposit");
			console.log("2. Withdraw");
			console.log("3. Transfer");
			console.log("4. View Accounts");
			console.log("5. Open New Account");
			console.log("6. Remove Account");
			console.log("7. Logout");
			console.log("-----------------------------------------------\n\n");

			// Accept input
			var choice = readline.question("Choice: ");
			
			// Decide what to do
			
			// Deposit	
			if(choice === "1")
			{
				console.log("Deposit");
				this.depositUI(customer);
			}
			// Withdraw
			else if(choice === "2")
			{
				console.log("Withdraw");
				this.withdrawUI(customer);
			}
			// Transfer
			else if(choice === "3")
			{
				console.log("Transfer");
				this.transferUI(customer);
			}
			// View accounts
			else if(choice === "4")
			{
				console.log("View Accounts");
				this.viewAccounts(customer);
				
			}
			// Open new account
			else if(choice === "5")
			{
				console.log("Open New Account");
				this.openAccountUI(customer);
			}
			// Close customer account
			else if(choice === "6")
			{
				console.log("Remove Account");
				this.closeAccount(customer);
			}
			else if(choice === "7")
			{
				console.log("Logging Out");
				this.masterChoice();
			}
			else //ADDED AN ELSE STATEMENT ********************
			{
				console.log("Input Error... Please Try again...\n\n");
				var choice = readline.question("Choice: ");
			}
		}
		while(choice < 8 && choice > 0);
	}
===============================================================================================================================









Fix #7
===============================================================================================================================
For lines 287-319 On the master menu to login/create account. We added a third option into the masterChoice function to just exit the program should the user enter in "3". Otherwise the user would be looped to re-enter as many inputs until the program receives a valid input.

Original Code
this.masterChoice = function()
	{
		do
		{
			console.log("What would you like to do?");
			console.log("1. Login");
			console.log("2. Create Account\n");
			
			// Get the choice
			var choice = readline.question("Choice: ");	
			

			// Login
			if(choice == 1)	
				this.loginUI();

			// Create new user account
			else if (choice == 2)
				this.createCustomerUI();
			
		}while(choice != 1 && choice != 2);
	}
	
Corrected Code
this.masterChoice = function()
	{
		do
		{
			console.log("What would you like to do?");
			console.log("1. Login");
			console.log("2. Create Account");
			console.log("3. Exit\n");			
			
			// Get the choice
			var choice = readline.question("Choice: ");	
			

			// Login
			if(choice === "1")	//CHANGE ANY AND ALL LOGICAL COMPARISONS TO === *************************
				this.loginUI();

			// Create new user account
			else if (choice === "2")
				this.createCustomerUI();
			
			// Exit program
			else if (choice === "3")
				process.exit(3);
			//added an else statement**************************
			else
			{
				console.log("Input error... Please try again...\n\n");
				var choice = readline.question("Choice: ");
			}
				
		}while(choice != 1 && choice != 2);
}
===============================================================================================================================





Fix #8
===============================================================================================================================
For lines 364-3369, we added an if statement in the loginUI function to test if the username and password exist. If not, we will prompt the user to login again with his/her correct credentials or create an account. (Reprompting the menu). If the code doesn't get fixed, nothing happens.

Original code
// -------------------------------------------------------------
	// The login menu
	// -------------------------------------------------------------
	this.loginUI = function()
	{
		do
		{
			console.log("Please enter your user name and password");
		
			// Get the user name
			var userName = readline.question("Username: ");
	
			// Get the password	
			var userPassword = readline.question("Password: ");
				
			// Whether there was a match
			var match = this.login(userName, userPassword);
		
		} while(!match);
		
		
		// Get the customer
		var customer = this.getCustomer(userName);
		
		// Show the user menu
		this.userActionMenuUI(customer);
	}
	
Corrected code
// -------------------------------------------------------------
	// The login menu
	// -------------------------------------------------------------
	this.loginUI = function()
	{
		do
		{
			console.log("Please enter your user name and password");
		
			// Get the user name
			// KEPT THESE VARIABLES AS VAR SINCE WE'LL BE USING THEM IN OUTSIDE FUNCTIONS ******************************
			var userName = readline.question("Username: ");
	
			// Get the password	
			var userPassword = readline.question("Password: ");
				
			// Whether there was a match
			var match = this.login(userName, userPassword);
			
			//error statement if there isn't an account
			if (match == false)
			{
				console.log("User name and password are not found! Please log in with the correct credentials or create a new account!")
				this.masterChoice();
			}
			
		} while(!match);
		
		
		// Get the customer
		var customer = this.getCustomer(userName);
		
		// Show the user menu
		this.userActionMenuUI(customer);
	}

===============================================================================================================================





Fix #9
===============================================================================================================================
For lines 429-435, we added a closeAccount function, which lets the user remove an account under their name. We added this function due to option number 6 on the choice menu.

// ------------------------------------------------------ **************
	// The UI for Removing an account
	// @param user - the owner of the account
	// ------------------------------------------------------
	this.closeAccount = function(customer, acctName, initialDeposits, type)
	{
		// Get account name from user ***********
		let rAcct = readline.question("Please choose an account to remove (e.g., enter 1 for the first account) ");
		// Remove account of the user ***********
		customer.removeAccount(rAcct, type);
}
===============================================================================================================================




Fix #10
===============================================================================================================================
For lines 492-496, we implimented a do while function in order to check if the user input for deposit is a correct input. If the input is something other an integer, we will ask them to enter the deposit amount again until a correct input has been entered. We also changed the var variables to lets.

Original Code
// Get the deposit amount
		var depositAmount = readline.question("Please enter the deposit amount: ");
		
Corrected Code
//error checking for deposit number
		do
		{
			// Get the deposit amount ********************
			var depositAmount = readline.question("Please enter the deposit amount: ");
} while(depositAmount <= 0 || isNaN(depositAmount));
===============================================================================================================================




Fix #11
===============================================================================================================================
For the withdrawUI function, we added a do-while loop in order to check if the the user input for withdrawal is valid. Valid means that the user can withdraw money from their account. However, an input could result in a value bigger than the amount of money in the account; therefore, the input will be invalid. Another invalid input could be anything other than an integer. If the input is invalid, we will prompt the user to enter the withdrawal amount again since the value may be bigger than how much the user actually has in their account. 

Original Code
// Get the withdraw amount
		var withdrawAmount = readline.question("Please enter the withraw amount: ");

Corrected Code
// Get the withdraw amount
		let withdrawAmount = readline.question("Please enter the withdraw amount: ");

		do
		{
			if(withdrawAmount > account.acctBalance)
			{
				console.log("There is not enough money in the account to withdraw.");
				withdrawAmount = readline.question("Please enter the withdraw amount: ");
			}
} while (withdrawAmount > account.acctBalance);

===============================================================================================================================
